document.addEventListener('DOMContentLoaded', () => {
    const audioFileInput = document.getElementById('audioFile');
    const predictBtn = document.getElementById('predictBtn');
    const resultDiv = document.getElementById('result');
    
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ /predict –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS
    const SERVER_URL = 'https://full-teams-behave.loca.lt/predict';
    
    predictBtn.addEventListener('click', async () => {
        if (!audioFileInput.files.length) {
            showResult('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª', 'error');
            return;
        }
        
        try {
            showResult('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ...', 'processing');
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Opera GX
            const file = audioFileInput.files[0];
            const renamedFile = new File([file], 'audio_record.wav', {
                type: file.type,
                lastModified: file.lastModified
            });
            
            const formData = new FormData();
            formData.append('audio', renamedFile);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CORS
            const response = await fetch(SERVER_URL, {
                method: 'POST',
                body: formData,
                headers: {
                    'Accept': 'application/json'
                },
                mode: 'cors'
            });
            
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            
            const data = await response.json();
            displayResults(data);
            
        } catch (error) {
            console.error('Fetch error:', error);
            showResult(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
        }
    });
    
    function displayResults(data) {
        const isHuman = data.prediction === 'human';
        resultDiv.innerHTML = `
            <div class="result-card ${isHuman ? 'human' : 'robot'}">
                <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</h2>
                <p class="verdict">${isHuman ? 'üë§ –ß–µ–ª–æ–≤–µ–∫' : 'ü§ñ –†–æ–±–æ—Ç'}</p>
                <div class="confidence">
                    <span>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
                    <div class="progress-bar">
                        <div class="progress" style="width: ${data.confidence * 100}%"></div>
                    </div>
                    <span>${(data.confidence * 100).toFixed(1)}%</span>
                </div>
                <button id="detailsBtn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                <div class="details" id="detailsPanel">
                    <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞: ${(data.probabilities.human * 100).toFixed(1)}%</p>
                    <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ–±–æ—Ç–∞: ${(data.probabilities.robot * 100).toFixed(1)}%</p>
                </div>
            </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π
        document.getElementById('detailsBtn')?.addEventListener('click', () => {
            const panel = document.getElementById('detailsPanel');
            panel.style.display = panel.style.display === 'block' ? 'none' : 'block';
        });
    }
    
    function showResult(message, type) {
        resultDiv.innerHTML = message;
        resultDiv.className = `result-${type}`;
    }
});